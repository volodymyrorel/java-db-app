/*
 * Click nbfs://nbhost/SystemFileSystem/Templates/Licenses/license-default.txt to change this license
 * Click nbfs://nbhost/SystemFileSystem/Templates/GUIForms/JFrame.java to edit this template
 */
package mypackage;

import java.sql.PreparedStatement;
import java.sql.SQLException;
import java.sql.ResultSet;
import java.sql.ResultSetMetaData;
import java.util.Vector;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.swing.DefaultComboBoxModel;
import javax.swing.JOptionPane;
import javax.swing.table.DefaultTableModel;
import static mypackage.MainForm.conn;
/**
 *
 * @author Володимир
 */
public class ClientsForm extends javax.swing.JFrame {

    /**
     * Creates new form AgentsForm
     */
    public ClientsForm() {
        initComponents();
        tableUpdate("SELECT * FROM `clients`;");
        comboBoxUpdate();
        setDefaultCloseOperation(DISPOSE_ON_CLOSE);
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jPanel1 = new javax.swing.JPanel();
        jLabel2 = new javax.swing.JLabel();
        jLabel3 = new javax.swing.JLabel();
        txtNameClient = new javax.swing.JTextField();
        txtDateClient = new javax.swing.JTextField();
        txtSexClient = new javax.swing.JTextField();
        jLabel1 = new javax.swing.JLabel();
        buttonEdit = new javax.swing.JButton();
        buttonSearch = new javax.swing.JButton();
        buttonNew = new javax.swing.JButton();
        buttonDelete = new javax.swing.JButton();
        jLabel5 = new javax.swing.JLabel();
        cbId = new javax.swing.JComboBox<>();
        jLabel4 = new javax.swing.JLabel();
        jScrollPane1 = new javax.swing.JScrollPane();
        jTable1 = new javax.swing.JTable();
        btnSortName = new javax.swing.JButton();
        btnSortDate = new javax.swing.JButton();
        btnSortSex = new javax.swing.JButton();
        btnSortId = new javax.swing.JButton();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        setTitle("Турагентство | Агенти");
        addWindowListener(new java.awt.event.WindowAdapter() {
            public void windowClosed(java.awt.event.WindowEvent evt) {
                formWindowClosed(evt);
            }
            public void windowClosing(java.awt.event.WindowEvent evt) {
                formWindowClosing(evt);
            }
        });

        jPanel1.setBorder(javax.swing.BorderFactory.createTitledBorder(null, "Дані", javax.swing.border.TitledBorder.DEFAULT_JUSTIFICATION, javax.swing.border.TitledBorder.DEFAULT_POSITION, new java.awt.Font("Segoe UI", 0, 14))); // NOI18N

        jLabel2.setText("Дата народження:");

        jLabel3.setText("Стать:");

        jLabel1.setText("Ім'я:");

        buttonEdit.setText("Редагувати");
        buttonEdit.setEnabled(false);
        buttonEdit.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                buttonEditActionPerformed(evt);
            }
        });

        buttonSearch.setText("Пошук");
        buttonSearch.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                buttonSearchActionPerformed(evt);
            }
        });

        buttonNew.setText("Новий");
        buttonNew.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                buttonNewActionPerformed(evt);
            }
        });

        buttonDelete.setText("Видалити");
        buttonDelete.setEnabled(false);
        buttonDelete.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                buttonDeleteActionPerformed(evt);
            }
        });

        jLabel5.setText("Номер замовлення:");

        cbId.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                cbIdActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout jPanel1Layout = new javax.swing.GroupLayout(jPanel1);
        jPanel1.setLayout(jPanel1Layout);
        jPanel1Layout.setHorizontalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addGap(12, 12, 12)
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                            .addComponent(jLabel3)
                            .addComponent(jLabel2)
                            .addComponent(jLabel1)
                            .addComponent(jLabel5))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                            .addComponent(txtNameClient)
                            .addComponent(txtDateClient)
                            .addComponent(txtSexClient, javax.swing.GroupLayout.DEFAULT_SIZE, 200, Short.MAX_VALUE)
                            .addComponent(cbId, 0, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)))
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING, false)
                            .addComponent(buttonNew, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addComponent(buttonEdit, javax.swing.GroupLayout.DEFAULT_SIZE, 154, Short.MAX_VALUE))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(buttonSearch, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addComponent(buttonDelete, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))))
                .addContainerGap())
        );
        jPanel1Layout.setVerticalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addGap(22, 22, 22)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(txtNameClient, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel1, javax.swing.GroupLayout.PREFERRED_SIZE, 28, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(txtDateClient, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel2, javax.swing.GroupLayout.PREFERRED_SIZE, 28, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(txtSexClient, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel3, javax.swing.GroupLayout.PREFERRED_SIZE, 29, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel5)
                    .addComponent(cbId, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 35, Short.MAX_VALUE)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(buttonNew)
                    .addComponent(buttonDelete))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(buttonEdit)
                    .addComponent(buttonSearch))
                .addContainerGap())
        );

        jLabel4.setFont(new java.awt.Font("Segoe UI", 1, 18)); // NOI18N
        jLabel4.setText("Клієнти");

        jTable1.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null}
            },
            new String [] {
                "name_client", "date_client", "sex_client", "idorders"
            }
        ) {
            boolean[] canEdit = new boolean [] {
                false, false, false, false
            };

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        jTable1.getTableHeader().setReorderingAllowed(false);
        jTable1.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                jTable1MouseClicked(evt);
            }
        });
        jScrollPane1.setViewportView(jTable1);

        btnSortName.setText("•");
        btnSortName.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnSortNameActionPerformed(evt);
            }
        });

        btnSortDate.setText("•");
        btnSortDate.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnSortDateActionPerformed(evt);
            }
        });

        btnSortSex.setText("•");
        btnSortSex.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnSortSexActionPerformed(evt);
            }
        });

        btnSortId.setText("•");
        btnSortId.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnSortIdActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(20, 20, 20)
                .addComponent(jPanel1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addGroup(layout.createSequentialGroup()
                        .addGap(84, 84, 84)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jLabel4)
                            .addGroup(layout.createSequentialGroup()
                                .addComponent(btnSortName)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                .addComponent(btnSortDate)
                                .addGap(127, 127, 127)
                                .addComponent(btnSortSex)
                                .addGap(129, 129, 129)
                                .addComponent(btnSortId)
                                .addGap(69, 69, 69))))
                    .addGroup(layout.createSequentialGroup()
                        .addGap(18, 18, 18)
                        .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 612, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addContainerGap(25, Short.MAX_VALUE))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addGap(29, 29, 29)
                        .addComponent(jLabel4)
                        .addGap(32, 32, 32)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(btnSortName)
                            .addComponent(btnSortDate)
                            .addComponent(btnSortSex)
                            .addComponent(btnSortId))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 318, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(layout.createSequentialGroup()
                        .addGap(105, 105, 105)
                        .addComponent(jPanel1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addContainerGap(28, Short.MAX_VALUE))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    PreparedStatement ps;
    int sortName = 0, sortDate = 0, sortSex = 0, sortId = 0;
    private void formWindowClosing(java.awt.event.WindowEvent evt) {//GEN-FIRST:event_formWindowClosing
        // TODO add your handling code here:
        setVisible(false);
    }//GEN-LAST:event_formWindowClosing

    private void formWindowClosed(java.awt.event.WindowEvent evt) {//GEN-FIRST:event_formWindowClosed
        // TODO add your handling code here:
    }//GEN-LAST:event_formWindowClosed

    private void buttonEditActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_buttonEditActionPerformed
        // TODO add your handling code here:
        DefaultTableModel df = (DefaultTableModel)jTable1.getModel();
        int selectedIndex = jTable1.getSelectedRow();
        
        String name = df.getValueAt(selectedIndex, 0).toString();
        String date = df.getValueAt(selectedIndex, 1).toString();
        String id = df.getValueAt(selectedIndex, 3).toString();
        String nameText = txtNameClient.getText();
        String dateText = txtDateClient.getText();
        String sexText = txtSexClient.getText();
        String idText = cbId.getSelectedItem().toString();
        
        if (!"".equals(nameText) && !"".equals(dateText) && !"".equals(sexText) && !"".equals(idText)) {
        
            try {
                ps = conn.prepareStatement("UPDATE `clients` SET name_client=?, date_client=?, sex_client=?, idorders=? WHERE name_client=? AND date_client=? AND idorders=?;");
                ps.setString(1, nameText);
                ps.setString(2, dateText);
                ps.setString(3, sexText);
                ps.setString(4, idText);
                ps.setString(5, name);
                ps.setString(6, date);
                ps.setString(7, id);
                ps.executeUpdate();
                
                JOptionPane.showMessageDialog(this, "Відредаговано клієнта");
                tableUpdate("SELECT * FROM `clients`;");
                comboBoxUpdate();
                
                buttonEdit.setEnabled(false);
                buttonDelete.setEnabled(false);
                txtNameClient.setText("");
                txtDateClient.setText("");
                txtSexClient.setText("");
                cbId.setSelectedItem("");
                txtNameClient.requestFocus();
                
            } catch (SQLException ex) {
                Logger.getLogger(ClientsForm.class.getName()).log(Level.SEVERE, null, ex);
            }
        }
    }//GEN-LAST:event_buttonEditActionPerformed

    private void buttonSearchActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_buttonSearchActionPerformed
        // TODO add your handling code here:
        String nameText = txtNameClient.getText();
        String dateText = txtDateClient.getText();
        String sexText = txtSexClient.getText();
        String idText = cbId.getSelectedItem().toString();
        String ps = "SELECT * FROM `clients` WHERE `name_client` LIKE ('%"
                + nameText + "%') AND `date_client` LIKE ('%"
                + dateText + "%') AND `sex_client` LIKE ('%"
                + sexText + "%') AND `idorders` LIKE ('%"
                + idText + "%');";
        System.out.println(ps);
        tableUpdate(ps);
    }//GEN-LAST:event_buttonSearchActionPerformed

    private void jTable1MouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_jTable1MouseClicked
        // TODO add your handling code here:
        DefaultTableModel df = (DefaultTableModel)jTable1.getModel();
        int selectedIndex = jTable1.getSelectedRow();
        txtNameClient.setText(df.getValueAt(selectedIndex, 0).toString());
        txtDateClient.setText(df.getValueAt(selectedIndex, 1).toString());
        txtSexClient.setText(df.getValueAt(selectedIndex, 2).toString());
        cbId.setSelectedItem(df.getValueAt(selectedIndex, 3));
        buttonEdit.setEnabled(true);
        buttonDelete.setEnabled(true);
    }//GEN-LAST:event_jTable1MouseClicked

    private void btnSortNameActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnSortNameActionPerformed
        // TODO add your handling code here:
        String order = new String();
        String text = new String();
        if (sortName % 3 == 0) {
            order = " ORDER BY name_client ASC;";
            text = "▼";
        } 
        if (sortName % 3 == 1) {
            order = " ORDER BY name_client DESC;";
            text = "▲";
        }
        if (sortName % 3 == 2) {
            order = ";";
            text = "•";
        }
        btnSortDate.setText("•");
        btnSortSex.setText("•");
        btnSortId.setText("•");
        sortDate = 0;
        sortSex = 0;
        sortId = 0;
        btnSortName.setText(text);
        sortName++;
        String q = "SELECT * FROM `clients`" + order;
        buttonEdit.setEnabled(false);
        buttonDelete.setEnabled(false);
        tableUpdate(q);
    }//GEN-LAST:event_btnSortNameActionPerformed

    private void btnSortDateActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnSortDateActionPerformed
        // TODO add your handling code here:
        String order = new String();
        String text = new String();
        if (sortDate % 3 == 0) {
            order = " ORDER BY date_client ASC;";
            text = "▼";
        } 
        if (sortDate % 3 == 1) {
            order = " ORDER BY date_client DESC;";
            text = "▲";
        }
        if (sortDate % 3 == 2) {
            order = ";";
            text = "•";
        }
        btnSortName.setText("•");
        btnSortSex.setText("•");
        btnSortId.setText("•");
        sortName = 0;
        sortSex = 0;
        sortId = 0;
        btnSortDate.setText(text);
        sortDate++;
        String q = "SELECT * FROM `clients`" + order;
        buttonEdit.setEnabled(false);
        buttonDelete.setEnabled(false);
        tableUpdate(q);
    }//GEN-LAST:event_btnSortDateActionPerformed

    private void btnSortSexActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnSortSexActionPerformed
        // TODO add your handling code here:
        String order = new String();
        String text = new String();
        if (sortSex % 3 == 0) {
            order = " ORDER BY sex_client ASC;";
            text = "▼";
        } 
        if (sortSex % 3 == 1) {
            order = " ORDER BY sex_client DESC;";
            text = "▲";
        }
        if (sortSex % 3 == 2) {
            order = ";";
            text = "•";
        }
        btnSortDate.setText("•");
        btnSortName.setText("•");
        btnSortId.setText("•");
        sortDate = 0;
        sortName = 0;
        sortId = 0;
        btnSortSex.setText(text);
        sortSex++;
        String q = "SELECT * FROM `clients`" + order;
        buttonEdit.setEnabled(false);
        buttonDelete.setEnabled(false);
        tableUpdate(q);
    }//GEN-LAST:event_btnSortSexActionPerformed

    private void btnSortIdActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnSortIdActionPerformed
        // TODO add your handling code here:
        String order = new String();
        String text = new String();
        if (sortId % 3 == 0) {
            order = " ORDER BY idorders ASC;";
            text = "▼";
        } 
        if (sortId % 3 == 1) {
            order = " ORDER BY idorders DESC;";
            text = "▲";
        }
        if (sortId % 3 == 2) {
            order = ";";
            text = "•";
        }
        btnSortDate.setText("•");
        btnSortName.setText("•");
        btnSortSex.setText("•");
        sortDate = 0;
        sortName = 0;
        sortSex = 0;
        btnSortId.setText(text);
        sortId++;
        String q = "SELECT * FROM `clients`" + order;
        buttonEdit.setEnabled(false);
        buttonDelete.setEnabled(false);
        tableUpdate(q);
    }//GEN-LAST:event_btnSortIdActionPerformed

    private void cbIdActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_cbIdActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_cbIdActionPerformed

    private void buttonNewActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_buttonNewActionPerformed
        // TODO add your handling code here:
        String name = txtNameClient.getText();
        String date = txtDateClient.getText();
        String sex = txtSexClient.getText();
        String id = cbId.getSelectedItem().toString();
        
        if (!"".equals(name) && !"".equals(date) && !"".equals(sex) && !"".equals(id)) {
        
            try {
                ps = conn.prepareStatement("INSERT INTO `clients`(name_client, date_client, sex_client, idorders) VALUES(?, ?, ?, ?);");
                ps.setString(1, name);
                ps.setString(2, date);
                ps.setString(3, sex);
                ps.setString(4, id);
                ps.executeUpdate();
                
                JOptionPane.showMessageDialog(this, "Додано клієнта");
                tableUpdate("SELECT * FROM `clients`;");
                comboBoxUpdate();
                
                txtNameClient.setText("");
                txtDateClient.setText("");
                txtSexClient.setText("");
                cbId.setSelectedItem("");
                txtNameClient.requestFocus();
                
            } catch (SQLException ex) {
                Logger.getLogger(ClientsForm.class.getName()).log(Level.SEVERE, null, ex);
            }
        }
    }//GEN-LAST:event_buttonNewActionPerformed

    private void buttonDeleteActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_buttonDeleteActionPerformed
        // TODO add your handling code here:
        DefaultTableModel df = (DefaultTableModel)jTable1.getModel();
        int selectedIndex = jTable1.getSelectedRow();
        String name = df.getValueAt(selectedIndex, 0).toString();
        String date = df.getValueAt(selectedIndex, 1).toString();
        String id = df.getValueAt(selectedIndex, 3).toString();
        int dialogResult = JOptionPane.showConfirmDialog(null, "Ви хочете видалити клієнта на ім'я " + name + "?", "Видалення запису", JOptionPane.YES_NO_OPTION);
        if (dialogResult == JOptionPane.YES_OPTION) {
            try {
                ps = conn.prepareStatement("DELETE FROM `clients` WHERE name_client=? AND date_client=? AND idorders=?;");
                ps.setString(1, name);
                ps.setString(2, date);
                ps.setString(3, id);
                ps.executeUpdate();
                
                JOptionPane.showMessageDialog(this, "Клієнта видалено");
                tableUpdate("SELECT * FROM `clients`;");
                comboBoxUpdate();
                
                buttonEdit.setEnabled(false);
                buttonDelete.setEnabled(false);
                txtNameClient.setText("");
                txtDateClient.setText("");
                txtSexClient.setText("");
                cbId.setSelectedItem("");
                txtNameClient.requestFocus();
                
            } catch (SQLException ex) {
                Logger.getLogger(ClientsForm.class.getName()).log(Level.SEVERE, null, ex);
            }
        }
    }//GEN-LAST:event_buttonDeleteActionPerformed

    private void tableUpdate(String query) {
        int c;
        try {
            ps = conn.prepareStatement(query);
            ResultSet rs = ps.executeQuery();
            ResultSetMetaData meta = rs.getMetaData();
            c = meta.getColumnCount();
            DefaultTableModel df = (DefaultTableModel)jTable1.getModel();
            df.setRowCount(0);
            while(rs.next()) {
                Vector v = new Vector();
                for (int i = 1; i <= c; i++) {
                    v.add(rs.getString("name_client"));
                    v.add(rs.getString("date_client"));
                    v.add(rs.getString("sex_client"));
                    v.add(rs.getString("idorders"));
                }
                df.addRow(v);
            }
        } catch (SQLException ex) {
            Logger.getLogger(ClientsForm.class.getName()).log(Level.SEVERE, null, ex);
        }
        
    }
    
    private void comboBoxUpdate() {
        try {
            ps = conn.prepareStatement("SELECT DISTINCT idorders FROM `orders`;");
            ResultSet rs = ps.executeQuery();
            DefaultComboBoxModel df = (DefaultComboBoxModel)cbId.getModel();
            df.removeAllElements();
            df.addElement("");
            while (rs.next()) {
                String id = rs.getString("idorders");
                df.addElement(id);
            }
        } catch (SQLException ex) {
            Logger.getLogger(ClientsForm.class.getName()).log(Level.SEVERE, null, ex);
        }
    }
    
//    private void tableHeaderMouseListener() {
//        JTableHeader header = jTable1.getTableHeader();
//        header.addMouseListener(new TableHeaderMouseListener(jTable1));
//    }
    
    /**
     * @param args the command line arguments
     */
//    public static void main(String args[]) {
//        /* Set the Nimbus look and feel */
//        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
//        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
//         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
//         */
//        try {
//            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
//                if ("Nimbus".equals(info.getName())) {
//                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
//                    break;
//                }
//            }
//        } catch (ClassNotFoundException ex) {
//            java.util.logging.Logger.getLogger(AgentsForm.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
//        } catch (InstantiationException ex) {
//            java.util.logging.Logger.getLogger(AgentsForm.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
//        } catch (IllegalAccessException ex) {
//            java.util.logging.Logger.getLogger(AgentsForm.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
//        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
//            java.util.logging.Logger.getLogger(AgentsForm.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
//        }
//        //</editor-fold>
//
//        /* Create and display the form */
//        java.awt.EventQueue.invokeLater(new Runnable() {
//            public void run() {
//                new AgentsForm().setVisible(true);
//            }
//        });
//    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton btnSortDate;
    private javax.swing.JButton btnSortId;
    private javax.swing.JButton btnSortName;
    private javax.swing.JButton btnSortSex;
    private javax.swing.JButton buttonDelete;
    private javax.swing.JButton buttonEdit;
    private javax.swing.JButton buttonNew;
    private javax.swing.JButton buttonSearch;
    private javax.swing.JComboBox<String> cbId;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JLabel jLabel5;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JTable jTable1;
    private javax.swing.JTextField txtDateClient;
    private javax.swing.JTextField txtNameClient;
    private javax.swing.JTextField txtSexClient;
    // End of variables declaration//GEN-END:variables
}
